# -*- coding: utf-8 -*-
"""fake_news_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cgt3hSLaWEMHheZ2j21S8PeC7CtCZcsK
"""

import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

nltk.download('stopwords')

columns = ['ID', 'Label', 'Statement', 'Subject', 'Speaker', 'Speaker Job Title',
           'State Info', 'Party Affiliation', 'Barely True Count', 'False Count',
           'Half True Count', 'Mostly True Count', 'Pants on Fire Count', 'Context']
train_df = pd.read_csv('/content/train.tsv', sep='\t', header=None, names=columns)
test_df = pd.read_csv('/content/test.tsv', sep='\t', header=None, names=columns)
valid_df = pd.read_csv('/content/valid.tsv', sep='\t', header=None, names=columns)

df = pd.concat([train_df, test_df, valid_df], ignore_index=True)

def clean_text(text):
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    text = text.lower()
    text = text.split()
    text = [word for word in text if word not in stopwords.words('english')]
    text = ' '.join(text)
    return text

df['Cleaned_Statement'] = df['Statement'].apply(clean_text)

label_mapping = {'pants-fire': 0, 'false': 0, 'barely-true': 0, 'half-true': 1, 'mostly-true': 1, 'true': 1}
df['Label'] = df['Label'].map(label_mapping)

tfidf_vectorizer = TfidfVectorizer(max_features=5000)
X = tfidf_vectorizer.fit_transform(df['Cleaned_Statement']).toarray()
y = df['Label'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)


print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
print('Classification Report:')
print(classification_report(y_test, y_pred, target_names=['False', 'True']))
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))